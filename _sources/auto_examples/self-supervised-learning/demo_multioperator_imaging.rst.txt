
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/self-supervised-learning/demo_multioperator_imaging.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_self-supervised-learning_demo_multioperator_imaging.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_self-supervised-learning_demo_multioperator_imaging.py:


Self-supervised learning from incomplete measurements of multiple operators.
====================================================================================================

This example shows you how to train a reconstruction network for an inpainting
inverse problem on a fully self-supervised way, i.e., using measurement data only.

The dataset consists of pairs :math:`(y_i,A_{g_i})` where :math:`y_i` are the measurements and :math:`A_{g_i}` is a
binary sampling operator out of :math:`G` (i.e., :math:`g_i\in \{1,\dots,G\}`).

This self-supervised learning approach is presented in `"Unsupervised Learning From Incomplete Measurements for
Inverse Problems" <https://openreview.net/pdf?id=aV9WSvM6N3>`_, and minimizes the loss function:

.. math::

    \mathcal{L}(\theta) = \sum_{i=1}^{N} \left\|A_{g_i} \hat{x}_{i,\theta} - y_i \right\|_2^2 + \sum_{s=1}^{G}
    \left\|\hat{x}_{i,\theta} - R_{\theta}(A_s\hat{x}_{i,\theta},A_s) \right\|_2^2

where :math:`R_{\theta}` is a reconstruction network with parameters :math:`\theta`, :math:`y_i` are the measurements,
:math:`A_s` is a binary sampling operator, and :math:`\hat{x}_{i,\theta} = R_{\theta}(y_i,A_{g_i})`.

.. GENERATED FROM PYTHON SOURCE LINES 23-33

.. code-block:: default


    import deepinv as dinv
    from torch.utils.data import DataLoader
    import torch
    from pathlib import Path
    from torchvision import transforms
    from deepinv.models.denoiser import online_weights_path
    from deepinv.training_utils import train, test
    from torchvision import datasets








.. GENERATED FROM PYTHON SOURCE LINES 34-37

Setup paths for data loading and results.
---------------------------------------------------------------


.. GENERATED FROM PYTHON SOURCE LINES 37-50

.. code-block:: default


    BASE_DIR = Path(".")
    ORIGINAL_DATA_DIR = BASE_DIR / "datasets"
    DATA_DIR = BASE_DIR / "measurements"
    RESULTS_DIR = BASE_DIR / "results"
    DEG_DIR = BASE_DIR / "degradations"
    CKPT_DIR = BASE_DIR / "ckpts"

    # Set the global random seed from pytorch to ensure reproducibility of the example.
    torch.manual_seed(0)

    device = dinv.utils.get_freer_gpu() if torch.cuda.is_available() else "cpu"








.. GENERATED FROM PYTHON SOURCE LINES 51-55

Load base image datasets and degradation operators.
----------------------------------------------------------------------------------
In this example, we use the MNIST dataset for training and testing.


.. GENERATED FROM PYTHON SOURCE LINES 55-65

.. code-block:: default


    transform = transforms.Compose([transforms.ToTensor()])

    train_base_dataset = datasets.MNIST(
        root="../datasets/", train=True, transform=transform, download=True
    )
    test_base_dataset = datasets.MNIST(
        root="../datasets/", train=False, transform=transform, download=True
    )








.. GENERATED FROM PYTHON SOURCE LINES 66-76

Generate a dataset of subsampled images and load it.
----------------------------------------------------------------------------------
We generate 10 different inpainting operators, each one with a different random mask.
If the :func:`deepinv.datasets.generate_dataset` receives a list of physics operators, it
generates a dataset for each operator and returns a list of paths to the generated datasets.

.. note::

  We only use 10 training images per operator to reduce the computational time of this example. You can use the whole
  dataset by setting ``n_images_max = None``.

.. GENERATED FROM PYTHON SOURCE LINES 76-114

.. code-block:: default


    number_of_operators = 10

    # defined physics
    physics = [
        dinv.physics.Inpainting(mask=0.5, tensor_size=(1, 28, 28), device=device)
        for _ in range(number_of_operators)
    ]

    # Use parallel dataloader if using a GPU to reduce training time,
    # otherwise, as all computes are on CPU, use synchronous data loading.
    num_workers = 4 if torch.cuda.is_available() else 0
    n_images_max = (
        None if torch.cuda.is_available() else 50
    )  # number of images used for training (uses the whole dataset if you have a gpu)

    operation = "inpainting"
    my_dataset_name = "demo_multioperator_imaging"
    measurement_dir = DATA_DIR / "MNIST" / operation
    deepinv_datasets_path = dinv.datasets.generate_dataset(
        train_dataset=train_base_dataset,
        test_dataset=test_base_dataset,
        physics=physics,
        device=device,
        save_dir=measurement_dir,
        train_datapoints=n_images_max,
        test_datapoints=10,
        num_workers=num_workers,
        dataset_filename=str(my_dataset_name),
    )

    train_dataset = [
        dinv.datasets.HDF5Dataset(path=path, train=True) for path in deepinv_datasets_path
    ]
    test_dataset = [
        dinv.datasets.HDF5Dataset(path=path, train=False) for path in deepinv_datasets_path
    ]





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Computing train measurement vectors from base dataset of operator 1 out of 10...
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 329.25it/s]
    Computing test measurement vectors from base dataset of operator 1 out of 10...
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 713.32it/s]
    Computing train measurement vectors from base dataset of operator 2 out of 10...
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 389.62it/s]
    Computing test measurement vectors from base dataset of operator 2 out of 10...
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 756.96it/s]
    Computing train measurement vectors from base dataset of operator 3 out of 10...
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 397.26it/s]
    Computing test measurement vectors from base dataset of operator 3 out of 10...
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 738.82it/s]
    Computing train measurement vectors from base dataset of operator 4 out of 10...
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 398.74it/s]
    Computing test measurement vectors from base dataset of operator 4 out of 10...
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 765.52it/s]
    Computing train measurement vectors from base dataset of operator 5 out of 10...
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 397.19it/s]
    Computing test measurement vectors from base dataset of operator 5 out of 10...
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 741.04it/s]
    Computing train measurement vectors from base dataset of operator 6 out of 10...
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 393.50it/s]
    Computing test measurement vectors from base dataset of operator 6 out of 10...
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 753.56it/s]
    Computing train measurement vectors from base dataset of operator 7 out of 10...
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 396.21it/s]
    Computing test measurement vectors from base dataset of operator 7 out of 10...
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 745.52it/s]
    Computing train measurement vectors from base dataset of operator 8 out of 10...
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 394.28it/s]
    Computing test measurement vectors from base dataset of operator 8 out of 10...
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 756.41it/s]
    Computing train measurement vectors from base dataset of operator 9 out of 10...
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 401.41it/s]
    Computing test measurement vectors from base dataset of operator 9 out of 10...
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 743.67it/s]
    Computing train measurement vectors from base dataset of operator 10 out of 10...
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 389.37it/s]
    Computing test measurement vectors from base dataset of operator 10 out of 10...
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 743.01it/s]
    Dataset has been saved in measurements/MNIST/inpainting




.. GENERATED FROM PYTHON SOURCE LINES 115-120

Set up the reconstruction network
---------------------------------------------------------------

As a reconstruction network, we use a simple artifact removal network based on a U-Net.
The network is defined as a :math:`R_{\theta}(y,A)=\phi_{\theta}(A^{\top}y)` where :math:`\phi` is the U-Net.

.. GENERATED FROM PYTHON SOURCE LINES 120-127

.. code-block:: default


    # Define the unfolded trainable model.
    model = dinv.models.ArtifactRemoval(
        backbone_net=dinv.models.UNet(in_channels=1, out_channels=1, scales=3)
    )
    model = model.to(device)








.. GENERATED FROM PYTHON SOURCE LINES 128-139

Set up the training parameters
--------------------------------------------
We choose a self-supervised training scheme with two losses: the measurement consistency loss (MC)
and the multi-operator imaging loss (MOI).
Necessary and sufficient conditions on the number of operators and measurements are described
`here <https://www.jmlr.org/papers/v24/22-0315.html>`_.

.. note::

      We use a pretrained model to reduce training time. You can get the same results by training from scratch
      for 100 epochs.

.. GENERATED FROM PYTHON SOURCE LINES 139-161

.. code-block:: default


    epochs = 1
    learning_rate = 5e-4
    batch_size = 64 if torch.cuda.is_available() else 1

    # choose self-supervised training losses
    # generates 4 random rotations per image in the batch
    losses = [dinv.loss.MCLoss(), dinv.loss.MOILoss(physics)]

    # choose optimizer and scheduler
    optimizer = torch.optim.Adam(model.parameters(), lr=learning_rate, weight_decay=1e-8)
    scheduler = torch.optim.lr_scheduler.StepLR(optimizer, step_size=int(epochs * 0.8) + 1)

    # start with a pretrained model to reduce training time
    url = online_weights_path() + "demo_moi_ckp_10.pth"
    ckpt = torch.hub.load_state_dict_from_url(
        url, map_location=lambda storage, loc: storage, file_name="demo_moi_ckp_10.pth"
    )
    # load a checkpoint to reduce training time
    model.load_state_dict(ckpt["state_dict"])
    optimizer.load_state_dict(ckpt["optimizer"])





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Downloading: "https://mycore.core-cloud.net/index.php/s/9EzDqcJxQUJKYul/download?path=%2Fweights&files=demo_moi_ckp_10.pth" to /home/runner/.cache/torch/hub/checkpoints/demo_moi_ckp_10.pth
      0%|          | 0.00/23.8M [00:00<?, ?B/s]      0%|          | 80.0k/23.8M [00:00<00:31, 790kB/s]      1%|          | 192k/23.8M [00:00<00:29, 849kB/s]       2%|▏         | 504k/23.8M [00:00<00:14, 1.67MB/s]      4%|▎         | 904k/23.8M [00:00<00:09, 2.52MB/s]      5%|▍         | 1.16M/23.8M [00:00<00:09, 2.39MB/s]      6%|▌         | 1.46M/23.8M [00:00<00:09, 2.44MB/s]      8%|▊         | 1.84M/23.8M [00:00<00:07, 2.89MB/s]      9%|▉         | 2.13M/23.8M [00:00<00:08, 2.67MB/s]     10%|█         | 2.43M/23.8M [00:01<00:08, 2.63MB/s]     12%|█▏        | 2.83M/23.8M [00:01<00:07, 3.05MB/s]     13%|█▎        | 3.13M/23.8M [00:01<00:07, 2.82MB/s]     14%|█▍        | 3.41M/23.8M [00:01<00:07, 2.70MB/s]     16%|█▌        | 3.79M/23.8M [00:01<00:06, 3.02MB/s]     17%|█▋        | 4.09M/23.8M [00:01<00:07, 2.81MB/s]     18%|█▊        | 4.38M/23.8M [00:01<00:07, 2.69MB/s]     20%|██        | 4.76M/23.8M [00:01<00:06, 3.04MB/s]     21%|██▏       | 5.06M/23.8M [00:02<00:06, 2.82MB/s]     22%|██▏       | 5.34M/23.8M [00:02<00:07, 2.70MB/s]     24%|██▍       | 5.74M/23.8M [00:02<00:06, 3.08MB/s]     25%|██▌       | 6.05M/23.8M [00:02<00:06, 2.85MB/s]     27%|██▋       | 6.33M/23.8M [00:02<00:06, 2.71MB/s]     28%|██▊       | 6.72M/23.8M [00:02<00:05, 3.07MB/s]     30%|██▉       | 7.02M/23.8M [00:02<00:06, 2.82MB/s]     31%|███       | 7.30M/23.8M [00:02<00:06, 2.73MB/s]     32%|███▏      | 7.69M/23.8M [00:02<00:05, 3.06MB/s]     34%|███▎      | 7.99M/23.8M [00:03<00:05, 2.81MB/s]     35%|███▍      | 8.27M/23.8M [00:03<00:05, 2.71MB/s]     36%|███▋      | 8.67M/23.8M [00:03<00:05, 2.76MB/s]     38%|███▊      | 8.97M/23.8M [00:03<00:05, 2.72MB/s]     39%|███▉      | 9.38M/23.8M [00:03<00:04, 3.10MB/s]     41%|████      | 9.68M/23.8M [00:03<00:05, 2.84MB/s]     42%|████▏     | 9.96M/23.8M [00:03<00:05, 2.75MB/s]     44%|████▎     | 10.4M/23.8M [00:03<00:04, 3.09MB/s]     45%|████▍     | 10.7M/23.8M [00:04<00:04, 2.83MB/s]     46%|████▌     | 10.9M/23.8M [00:04<00:04, 2.73MB/s]     48%|████▊     | 11.3M/23.8M [00:04<00:04, 3.07MB/s]     49%|████▉     | 11.6M/23.8M [00:04<00:04, 2.81MB/s]     50%|█████     | 11.9M/23.8M [00:04<00:04, 2.72MB/s]     52%|█████▏    | 12.3M/23.8M [00:04<00:03, 3.03MB/s]     53%|█████▎    | 12.6M/23.8M [00:04<00:04, 2.79MB/s]     54%|█████▍    | 12.9M/23.8M [00:04<00:04, 2.71MB/s]     56%|█████▌    | 13.2M/23.8M [00:04<00:03, 3.05MB/s]     57%|█████▋    | 13.6M/23.8M [00:05<00:03, 2.80MB/s]     58%|█████▊    | 13.8M/23.8M [00:05<00:03, 2.72MB/s]     60%|█████▉    | 14.2M/23.8M [00:05<00:03, 3.05MB/s]     61%|██████    | 14.5M/23.8M [00:05<00:03, 2.81MB/s]     62%|██████▏   | 14.8M/23.8M [00:05<00:03, 2.72MB/s]     64%|██████▍   | 15.2M/23.8M [00:05<00:03, 2.97MB/s]     65%|██████▌   | 15.5M/23.8M [00:05<00:03, 2.74MB/s]     66%|██████▋   | 15.8M/23.8M [00:05<00:03, 2.71MB/s]     68%|██████▊   | 16.1M/23.8M [00:06<00:02, 3.03MB/s]     69%|██████▉   | 16.4M/23.8M [00:06<00:02, 2.78MB/s]     70%|███████   | 16.7M/23.8M [00:06<00:02, 2.73MB/s]     72%|███████▏  | 17.1M/23.8M [00:06<00:02, 3.06MB/s]     73%|███████▎  | 17.4M/23.8M [00:06<00:02, 2.81MB/s]     74%|███████▍  | 17.7M/23.8M [00:06<00:02, 2.72MB/s]     76%|███████▌  | 18.1M/23.8M [00:06<00:01, 3.04MB/s]     77%|███████▋  | 18.4M/23.8M [00:06<00:02, 2.80MB/s]     79%|███████▊  | 18.7M/23.8M [00:07<00:01, 2.73MB/s]     80%|███████▉  | 19.0M/23.8M [00:07<00:01, 2.98MB/s]     81%|████████▏ | 19.3M/23.8M [00:07<00:01, 2.80MB/s]     83%|████████▎ | 19.6M/23.8M [00:07<00:01, 2.75MB/s]     84%|████████▍ | 20.0M/23.8M [00:07<00:01, 2.96MB/s]     85%|████████▌ | 20.3M/23.8M [00:07<00:01, 2.82MB/s]     87%|████████▋ | 20.6M/23.8M [00:07<00:01, 2.76MB/s]     88%|████████▊ | 20.9M/23.8M [00:07<00:00, 2.97MB/s]     89%|████████▉ | 21.3M/23.8M [00:07<00:00, 2.83MB/s]     91%|█████████ | 21.6M/23.8M [00:08<00:00, 2.76MB/s]     92%|█████████▏| 21.9M/23.8M [00:08<00:00, 2.98MB/s]     94%|█████████▎| 22.2M/23.8M [00:08<00:00, 2.83MB/s]     95%|█████████▍| 22.5M/23.8M [00:08<00:00, 2.76MB/s]     96%|█████████▋| 22.9M/23.8M [00:08<00:00, 2.98MB/s]     98%|█████████▊| 23.2M/23.8M [00:08<00:00, 2.83MB/s]     99%|█████████▉| 23.5M/23.8M [00:08<00:00, 2.76MB/s]    100%|██████████| 23.8M/23.8M [00:08<00:00, 2.80MB/s]




.. GENERATED FROM PYTHON SOURCE LINES 162-166

Train the network
--------------------------------------------



.. GENERATED FROM PYTHON SOURCE LINES 166-198

.. code-block:: default



    verbose = True  # print training information
    wandb_vis = False  # plot curves and images in Weight&Bias

    train_dataloader = [
        DataLoader(dataset, batch_size=batch_size, num_workers=num_workers, shuffle=True)
        for dataset in train_dataset
    ]
    test_dataloader = [
        DataLoader(dataset, batch_size=batch_size, num_workers=num_workers, shuffle=False)
        for dataset in test_dataset
    ]

    train(
        model=model,
        train_dataloader=train_dataloader,
        eval_dataloader=test_dataloader,
        epochs=epochs,
        scheduler=scheduler,
        losses=losses,
        physics=physics,
        optimizer=optimizer,
        device=device,
        save_path=str(CKPT_DIR / operation),
        verbose=verbose,
        wandb_vis=wandb_vis,
        log_interval=1,
        eval_interval=1,
        ckp_interval=10,
    )





.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    The model has 2069441 trainable parameters
            23-10-24-10:21:04       [1/1]   loss=5.51e-03   Loss_mc=1.67e-03        Loss_moi=3.84e-03       Train_psnr_model=19.91  Eval_psnr_model=21.20   

    ArtifactRemoval(
      (backbone_net): UNet(
        (Maxpool): MaxPool2d(kernel_size=2, stride=2, padding=0, dilation=1, ceil_mode=False)
        (Conv1): Sequential(
          (0): Conv2d(1, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BFBatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BFBatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
        )
        (Conv2): Sequential(
          (0): Conv2d(64, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BFBatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BFBatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
        )
        (Conv3): Sequential(
          (0): Conv2d(128, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BFBatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(256, 256, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BFBatchNorm2d(256, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
        )
        (Up3): Sequential(
          (0): Upsample(scale_factor=2.0, mode='nearest')
          (1): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): BFBatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (3): ReLU(inplace=True)
        )
        (Up_conv3): Sequential(
          (0): Conv2d(256, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BFBatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(128, 128, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BFBatchNorm2d(128, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
        )
        (Up2): Sequential(
          (0): Upsample(scale_factor=2.0, mode='nearest')
          (1): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (2): BFBatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (3): ReLU(inplace=True)
        )
        (Up_conv2): Sequential(
          (0): Conv2d(128, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (1): BFBatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (2): ReLU(inplace=True)
          (3): Conv2d(64, 64, kernel_size=(3, 3), stride=(1, 1), padding=(1, 1))
          (4): BFBatchNorm2d(64, eps=1e-05, momentum=0.1, affine=True, track_running_stats=True)
          (5): ReLU(inplace=True)
        )
        (Conv_1x1): Conv2d(64, 1, kernel_size=(1, 1), stride=(1, 1))
      )
    )



.. GENERATED FROM PYTHON SOURCE LINES 199-203

Test the network
--------------------------------------------



.. GENERATED FROM PYTHON SOURCE LINES 203-217

.. code-block:: default


    plot_images = True
    method = "multioperator_imaging"

    test(
        model=model,
        test_dataloader=test_dataloader,
        physics=physics,
        device=device,
        plot_images=plot_images,
        save_folder=RESULTS_DIR / method / operation,
        verbose=verbose,
        wandb_vis=wandb_vis,
    )



.. rst-class:: sphx-glr-horizontal


    *

      .. image-sg:: /auto_examples/self-supervised-learning/images/sphx_glr_demo_multioperator_imaging_001.png
         :alt: Input, Linear, Recons., GT
         :srcset: /auto_examples/self-supervised-learning/images/sphx_glr_demo_multioperator_imaging_001.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/self-supervised-learning/images/sphx_glr_demo_multioperator_imaging_002.png
         :alt: Input, Linear, Recons., GT
         :srcset: /auto_examples/self-supervised-learning/images/sphx_glr_demo_multioperator_imaging_002.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/self-supervised-learning/images/sphx_glr_demo_multioperator_imaging_003.png
         :alt: Input, Linear, Recons., GT
         :srcset: /auto_examples/self-supervised-learning/images/sphx_glr_demo_multioperator_imaging_003.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/self-supervised-learning/images/sphx_glr_demo_multioperator_imaging_004.png
         :alt: Input, Linear, Recons., GT
         :srcset: /auto_examples/self-supervised-learning/images/sphx_glr_demo_multioperator_imaging_004.png
         :class: sphx-glr-multi-img

    *

      .. image-sg:: /auto_examples/self-supervised-learning/images/sphx_glr_demo_multioperator_imaging_005.png
         :alt: Input, Linear, Recons., GT
         :srcset: /auto_examples/self-supervised-learning/images/sphx_glr_demo_multioperator_imaging_005.png
         :class: sphx-glr-multi-img


.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Processing data of operator 1 out of 10
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:01<00:00,  1.37s/it]    100%|██████████| 1/1 [00:01<00:00,  1.37s/it]
    Processing data of operator 2 out of 10
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:01<00:00,  1.36s/it]    100%|██████████| 1/1 [00:01<00:00,  1.36s/it]
    Processing data of operator 3 out of 10
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:01<00:00,  1.36s/it]    100%|██████████| 1/1 [00:01<00:00,  1.36s/it]
    Processing data of operator 4 out of 10
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:01<00:00,  1.39s/it]    100%|██████████| 1/1 [00:01<00:00,  1.39s/it]
    Processing data of operator 5 out of 10
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:01<00:00,  1.45s/it]    100%|██████████| 1/1 [00:01<00:00,  1.45s/it]
    Processing data of operator 6 out of 10
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 70.99it/s]
    Processing data of operator 7 out of 10
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 25.82it/s]
    Processing data of operator 8 out of 10
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 79.51it/s]
    Processing data of operator 9 out of 10
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 77.29it/s]
    Processing data of operator 10 out of 10
      0%|          | 0/1 [00:00<?, ?it/s]    100%|██████████| 1/1 [00:00<00:00, 78.69it/s]
    Test PSNR: Linear rec.: 13.10+-1.74 dB | Model: 21.20+-1.61 dB. 

    (21.19961757659912, 1.608243800995434, 13.103665542602538, 1.7379695636842403)




.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (2 minutes 32.820 seconds)


.. _sphx_glr_download_auto_examples_self-supervised-learning_demo_multioperator_imaging.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: demo_multioperator_imaging.py <demo_multioperator_imaging.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: demo_multioperator_imaging.ipynb <demo_multioperator_imaging.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
