
.. DO NOT EDIT.
.. THIS FILE WAS AUTOMATICALLY GENERATED BY SPHINX-GALLERY.
.. TO MAKE CHANGES, EDIT THE SOURCE PYTHON FILE:
.. "auto_examples/basics/demo_pansharpening.py"
.. LINE NUMBERS ARE GIVEN BELOW.

.. only:: html

    .. note::
        :class: sphx-glr-download-link-note

        :ref:`Go to the end <sphx_glr_download_auto_examples_basics_demo_pansharpening.py>`
        to download the full example code

.. rst-class:: sphx-glr-example-title

.. _sphx_glr_auto_examples_basics_demo_pansharpening.py:


Stacking and concatenating forward operators.
====================================================================================================

In this example, we show how to stack and concatenate forward operators to create new operators.
In particular, we create a pan-sharpening operator by stacking a downsampling and a color-to-grayscale
operators.

.. GENERATED FROM PYTHON SOURCE LINES 10-13

.. code-block:: default

    import deepinv as dinv
    import torch








.. GENERATED FROM PYTHON SOURCE LINES 14-24

Stacking forward operators.
------------------------------------
We can define a new forward operator by stacking or concatenating existing operators. Mathematically, this is
equivalent to obtaining

.. math::
          \begin{bmatrix} y_1 \\ y_2 \end{bmatrix} = \begin{bmatrix} A_1 \\ A_2 \end{bmatrix} x

Here we show how to stack two operators, one that downsamples a color image and another that converts the color image
grayscale. This is equivalent to the :class:`deepinv.physics.Pansharpen` operator.

.. GENERATED FROM PYTHON SOURCE LINES 24-36

.. code-block:: default


    img_size = (3, 64, 64)
    factor = 2
    filter = "gaussian"
    device = dinv.utils.get_freer_gpu() if torch.cuda.is_available() else "cpu"

    physics1 = dinv.physics.Downsampling(
        img_size=img_size, factor=factor, filter=filter, device=device
    )
    physics2 = dinv.physics.Decolorize()
    physics_stacked = physics2 + physics1








.. GENERATED FROM PYTHON SOURCE LINES 37-47

Generate toy image
--------------------------------------------------------------------

This example uses a toy image with 3 color channels.

The measurements of a stacked operator are :class:`deepinv.utils.TensorList` objects, which are lists of tensors
that can be added, multiplied, etc. to other :class:`deepinv.utils.TensorList` objects. It is also possible to
generate random or zero-filled :class:`deepinv.utils.TensorList` objects in one line of code (similarly to standard
:class:`torch.Tensor`).


.. GENERATED FROM PYTHON SOURCE LINES 47-60

.. code-block:: default


    x = torch.zeros((1,) + img_size, device=device)
    x[:, 0, 16:48, 16:48] = 0.7

    y = physics_stacked(x)
    xlin = physics_stacked.A_dagger(y)  # compute the linear pseudo-inverse

    dinv.utils.plot(
        [x, y[0], y[1], xlin],
        titles=["image", "high-res grayscale", "low-res color", "linear rec."],
    )





.. image-sg:: /auto_examples/basics/images/sphx_glr_demo_pansharpening_001.png
   :alt: image, high-res grayscale, low-res color, linear rec.
   :srcset: /auto_examples/basics/images/sphx_glr_demo_pansharpening_001.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 61-67

Verifying the stacked operator
--------------------------------------------

If the operator is linear, it is recommended to verify that the transpose well-defined using
:meth:`deepinv.physics.LinearPhysics.adjointness_test()`,
and that it has a unit norm using :meth:`deepinv.physics.LinearPhysics.compute_norm()`.

.. GENERATED FROM PYTHON SOURCE LINES 67-74

.. code-block:: default


    print(f"The stacked operator has norm={physics_stacked.compute_norm(x):.2f}")

    if physics_stacked.adjointness_test(x) < 1e-5:
        print("The stacked operator has a well defined transpose")






.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Power iteration converged at iteration 19, value=0.68
    The stacked operator has norm=0.68
    The stacked operator has a well defined transpose




.. GENERATED FROM PYTHON SOURCE LINES 75-80

Concatenating forward operators.
----------------------------------------------------------------------------------------

It is also possible to concatenate operators using the ``*`` operator between two forward operators.
Here we create a new operator that first downsamples the image, and then converts it to grayscale.

.. GENERATED FROM PYTHON SOURCE LINES 80-89

.. code-block:: default


    physics_concat = physics2 * physics1

    y = physics_concat(x)
    xlin = physics_concat.A_dagger(y)  # compute the linear pseudo-inverse

    dinv.utils.plot([x, y, xlin], titles=["image", "measurement", "linear rec."])





.. image-sg:: /auto_examples/basics/images/sphx_glr_demo_pansharpening_002.png
   :alt: image, measurement, linear rec.
   :srcset: /auto_examples/basics/images/sphx_glr_demo_pansharpening_002.png
   :class: sphx-glr-single-img





.. GENERATED FROM PYTHON SOURCE LINES 90-92

Verifying the concatenated operator
--------------------------------------------

.. GENERATED FROM PYTHON SOURCE LINES 92-98

.. code-block:: default



    print(f"The concatenated operator has norm={physics_concat.compute_norm(x):.2f}")

    if physics_concat.adjointness_test(x) < 1e-5:
        print("The concatenated operator has a well defined transpose")




.. rst-class:: sphx-glr-script-out

 .. code-block:: none

    Power iteration converged at iteration 8, value=0.11
    The concatenated operator has norm=0.11
    The concatenated operator has a well defined transpose





.. rst-class:: sphx-glr-timing

   **Total running time of the script:** (0 minutes 1.192 seconds)


.. _sphx_glr_download_auto_examples_basics_demo_pansharpening.py:

.. only:: html

  .. container:: sphx-glr-footer sphx-glr-footer-example




    .. container:: sphx-glr-download sphx-glr-download-python

      :download:`Download Python source code: demo_pansharpening.py <demo_pansharpening.py>`

    .. container:: sphx-glr-download sphx-glr-download-jupyter

      :download:`Download Jupyter notebook: demo_pansharpening.ipynb <demo_pansharpening.ipynb>`


.. only:: html

 .. rst-class:: sphx-glr-signature

    `Gallery generated by Sphinx-Gallery <https://sphinx-gallery.github.io>`_
